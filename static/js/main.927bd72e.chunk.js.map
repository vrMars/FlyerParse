{"version":3,"sources":["logo.svg","Items.js","PriceList.js","ItemList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItems","props","createTasks","bind","key","this","delete","item","text","listItems","entries","map","className","Component","Prices","price","console","log","class","name","merchant","ItemList","state","items","prices","fetchPrices","addItem","deleteItem","e","_inputElement","value","newItem","Date","now","setState","prevState","concat","preventDefault","filteredItems","filter","length","urlEncoded","URLSearchParams","append","myHeaders","Headers","fetch","method","headers","body","redirect","then","res","json","data","catch","ref","a","placeholder","type","onClick","Items","product","i","Array","isArray","p","index","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.927bd72e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nclass TodoItems extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.createTasks = this.createTasks.bind(this);\n    }\n\n    delete(key) {\n        this.props.delete(key);\n    }\n\n    createTasks(item) {\n        return <li key={item.key}>{item.text}</li>\n    }\n\n    render() {\n        var todoEntries = this.props.entries;\n        var listItems = todoEntries.map(this.createTasks);\n\n        return (\n            <ul className=\"theList\">\n                {listItems}\n            </ul>\n        );\n    }\n};\n\nexport default TodoItems;\n","import React from 'react'\n\nconst Prices = ({ price }) => {\n    console.log(price);\n    return (\n        <div class=\"card\">\n            <div class=\"card-body\">\n                <h5 class=\"card-title\">{price.name}</h5>\n                <h6 class=\"card-subtitle mb-2 text-muted\">{price.merchant}</h6>\n                <p class=\"card-text\">{price.price}</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Prices\n","import React, { Component } from \"react\";\nimport \"./ItemList.css\";\nimport Items from \"./Items\";\nimport Prices from \"./PriceList\";\n\nclass ItemList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            prices: []\n        };\n        this.fetchPrices = this.fetchPrices.bind(this);\n        this.addItem = this.addItem.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n    }\n\n    addItem(e) {\n        if (this._inputElement.value !== \"\") {\n            var newItem = {\n                text: this._inputElement.value,\n                key: Date.now()\n            };\n\n            this.setState((prevState) => {\n                return { \n                    items: prevState.items.concat(newItem) \n                };\n            });\n\n            this._inputElement.value = \"\";\n        }\n\n        console.log(this.state.items);\n\n        e.preventDefault();\n    }\n\n    deleteItem(key) {\n        var filteredItems = this.state.items.filter(function (item) {\n            return (item.key !== key);\n        });\n\n        this.setState({\n            items: filteredItems\n        });\n    }\n\n    fetchPrices() {\n        const items = this.state.items;\n        if (items.length !== 0) {\n            var urlEncoded = new URLSearchParams();\n            \n            for (const item of items) {\n                urlEncoded.append(\"items\", item.text);\n            }\n\n            var myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n            var requestOptions = {\n                method: 'POST',\n                headers: myHeaders,\n                body: urlEncoded,\n                redirect: 'follow'\n            };\n\n            fetch(\n                'https://flyer-parse.herokuapp.com/', requestOptions\n            )\n                .then(res => res.json())\n                .then((data) => {\n                    console.log(data);\n                    this.setState({prices: data})\n                })\n                .catch(console.log)\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"itemListMain\">\n                <div className=\"header\">\n                    <form>\n                        <input ref={ (a) => this._inputElement = a } placeholder=\"enter item\">\n                        </input>\n                        <button type=\"button\" onClick={this.addItem}>add</button>\n                        <button type=\"button\" onClick={this.fetchPrices}>get prices!</button>\n                    </form>\n                </div>\n                <Items entries={this.state.items} delete={this.deleteItem}/>\n                {\n                    this.state.prices && this.state.prices.map((product, i) =>\n                        Array.isArray(product) ?\n                        product.p.map((price, index) => \n                        <Prices key={index} price={price.p}/>\n                        ) : <Prices key={i} price={product.p[0]}/>\n                    )}\n            </div>\n        );\n    }\n}\n\nexport default ItemList;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ItemList from \"./ItemList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ItemList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}